exit
quantity
c
deal.quantity
quantity >= deal.quantity
quantity
exit
quantity - redeemed_deal_item_count
quantity / deal.quantity
quantity
quantity / deal.quantity
quantity
deal.discount
deal
deal.discount * (quantity / deal.quantity)
@cost
deal.discount
@discounts
deal.discount
@discounts
c
@discounts
c
@discounts
c
deal.quantity
quantity - redeemed_deal_item_count
(quantity - redeemed_deal_item_count) >= deal.quantity
quantity
redeemed_deal_item_count
c
(quantity - redeemed_deal_item_count) >= deal.quantity
exit
quantity
deal.quantity - redeemed_deal_item_count
deal.quantity
quantity
redeemed_deal_item_count
c
redeemed_deal_item_count
deal.quantity
quantity >= (deal.quantity - redeemed_deal_item_count)
quantity
exit
quantity
exit
quantity
redeemed_deal_item_count
c
deal.discount * (quantity / deal.quantity)
redeemed_deal_item_count
quantity >= (deal.quantity - redeemed_deal_item_count)
exit
redeemed_deal_item_count
c
 quantity >= (deal.quantity - redeemed_deal_item_count)
deals_descending_quantity
deal.discount
exit
@items
exit
@items
@discounts
c
deal.discount * (quantity / deal.quantity) if quantity >= deal.quantity
deal.discount
quantity
(quantity / deal.quantity)
deal.discount
deal
exit
   43:       @discounts += deal.discount * (quantity / deal.quantity) if quantity >= deal.quantity
deals_descending_quantity.each do | deal |
x = 0
quantity / deal.quantity
deals_descending_quantity
exit
item.deals.sort_by do |deal| deal.quantity end.reverseexi
item.deals.sort_by do |deal| deal.quantity end.reverse
item.deals.sort_by do |deal| deal.quantity end
item.deals.sort_by |deal| deal.quantity end
item.deals.sort_by |deal| deal.quantity
item.deals
exit
a.each do |thing| puts a end
a.respond_to?('each')
a.responds_to('each')
a.respond_to('each')
a = ["a"]
item.deals.is_a?(Hash)
item.deals.is_a?(Object)
item.deals.is_a?(Array)
item.deals.is_a?
item.deals.respond_to?('is_a?')
item.deals.respond_to?('size')
item.deals.respond_to?('length')
item.deals.respond_to?('each')
item.deals.try(:length)
item.deals.length
item.deals
item.deals.first
item.deals
item.has_deals?
item.has_deals
item.deals
item
exit
item.deals
item
exit
item.deals
item
exit
@rules
item.deals
item.deals.split[1]
item.deals.split
item.deals.split(,)
item.deals[1]
item.deals
item.deals.nil?
item.deals.class == Array
item.deals.class
item.deals.class = "Array"
item.deals.class
item.deals.is_a("Array")
item.deals.is_a(Array)
item.deals.is_a
item.deals.length
item.deals
item
item.
item.deals
item.deals.discount
quantity
item
exit
@items
exit
item
quantity
item
exit
 @items.map { |item| item.id }.tally
@items
exit
item
