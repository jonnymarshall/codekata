exit
@discounts
@cost
exit
@cost
c
@cost
c
cost
exit
item_tally.each do | item_code, quantity | puts "#{item_code} #{quantity}" end
item_tally
c
item_tally
c
item_tally
c
item_tally
c
item_tally
exit
c
exit
item_tally
@cost
c
@cost
item_tally
exit
@cost
@cost -= item[:price] * quantity
quantity
item[:price]
item[:price] * quantity
@cost += item[:price] * quantity
quantity
item
item = @pricing_rules[item_code]
item
@pricing_rules[item_code]
item_code
c
item_code
c
item_code
c
item_code
c
item_code
c
item_tally
c
item_tally
c
item_tally
c
item_tally
item_tally.each
c
item_tally
c
@cost
c
@cost
c
@cost
exit
@discounts
@cost
exit
item[:deal]
quantity / item[:deal]
quantity
item[:discount] * (quantity / item[:deal])
@discounts
exit
item[:discount] * (quantity / item[:deal]) 
quantity / item[:deal]
item[:discount] * quantity
item[:discount]
quantity >= item[:deal]
item.has_key?(:deal)
item
item[:quantity]
item[:quantity] / item[:deal]
exit
calculate_discounts(@pricing_rules[item_code], quantity)
c
exit
quantity
@pricing_rules[item_code]
qualifying_deal_applies(@pricing_rules[item_code], quantity)
qualifying_deal_applies
exit
@pricing_rules[item_code].try
@pricing_rules[item_code]
@pricing_rules[item_code].try(:deal)
@pricing_rules[item_code].try[:deal]
@pricing_rules[item_code].try(:deal)
quantity / @pricing_rules[item_code][:deal]
quantity
@pricing_rules[item_code][:deal]
exit
c
@pricing_rules[item_code]
@pricing_rules[item_code][:deal]
quantity
item_code
@pricing_rules[item_code].has_key?(:deal)
quantity
@pricing_rules[item_code][:price] * quantity
@pricing_rules[item_code][:price]
item_code
c
exit
item_tally[0]
item_tally
item_code
exit
item_code
@pricing_rules[item_code]
exit
item_tally
cum = item_tally.reduce(:+)
item_tally
exit
@items
item_tally@items
item_tally
exit
item_tally.sort_by { |k, v| k }.to_h
item_tally.sort_by { |k, v| k }
item_tally
item)tally
item_tally.sort_by { |k, v| k }item_tally
item_tally.sort_by { |k, v| k }
item_tally
item_tally.sort_by { |k, v| k[:id] } if @items.length > 1
item_tally.sort
item_tally
@items
exit
tally
@items
exit
@items
@items.map { |f| f[:id] }
@items.map { |f| f[:id] }.tally
@items
fruits
exit
@fruits
  }]
    :fruit=>"tomato"
    :color=>"red",
  {
  },
    :fruit=>"pear"
    :color=>"green",
  {
  },
    :fruit=>"apple"
    :color=>"red",
[{
b
  }]
    :fruit=>"tomato"
    :color=>"red",
  {
  },
    :fruit=>"pear"
    :color=>"green",
  {
  },
    :fruit=>"apple"
    :color=>"red",
b = [{
@items
@items.group_by { |item| item[:id] }
@items
exit
item[:deal]
count
item
exit
discount_qualifying_items.uniq
discount_qualifying_items
exit
discount_qualifying_items
calculate_discounts(discount_qualifying_items)
calculate_discounts
c
discounts
c
discounts
exit
count
 count == item[:deal] - 1
c
 count == item[:deal] - 1
c
 count == item[:deal] - 1
item[:discount]
item
discounts
exit
calculate_discounts(discount_qualifying_items)
c
exit
calculate_discounts(discount_qualifying_items)
prices.sum
prices
c
item[:id]
item
item(:id)
item
discount_qualifying_items << item(:id)
item.has_key?(:deal)
c
item.has_key?(:deal)
c
item.has_key?(:deal)
c
item
c
item
exit
nn
n
discount_qualifying_items
n
item.has_key?(:deal)
exit
discount_qualifying_itemsex
discount_qualifying_items
c
discount_qualifying_items
@items
c
@items
exit
prices.sum - discounts.sum
prices.sum
discounts
discount
prices
c
prices
c
discounts
prices
prics
exit
@items.sort_by { |k, v| k[:id] }
@items.sort_by { |k, v| k[:id]
